x = "Chromosome",
y = "Number of Mutations"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readabilit
install.packages("tikzDevice")
library(tikzDevice)
library(tikzDevice)
seq05_HG01605_annovar_version_1_$Chr <- gsub("chr", "", seq05_HG01605_annovar_version_1_$Chr, ignore.case = TRUE)
seq05_HG01605_annovar_version_1_$Chr <- trimws(seq05_HG01605_annovar_version_1_$Chr)  # Remove leading/trailing spaces
sum(is.na(seq05_HG01605_annovar_version_1_$Chr))
# Filter out rows with missing or empty values in the Chr column
seq05_HG01605_annovar_version_1_ <- seq05_HG01605_annovar_version_1_[!is.na(seq05_HG01605_annovar_version_1_$Chr), ]
data <-seq05_HG01605_annovar_version_1_
# Define the full set of valid chromosomes (including those with 0 mutations)
valid_chromosomes <- c(as.character(1:22), "X", "Y")
chromosome_df <- data.frame(Chr = valid_chromosomes)  # Create a data frame of all valid chromosomes
# Filter the data to include only valid chromosomes
filtered_data <- data %>%
filter(Chr %in% valid_chromosomes)
# Count the number of mutations per chromosome
mutation_counts <- filtered_data %>%
group_by(Chr) %>%
summarise(Mutations = n())
# Ensure all chromosomes (even those with 0 mutations) are included
complete_counts <- chromosome_df %>%
left_join(mutation_counts, by = "Chr") %>%
replace_na(list(Mutations = 0)) %>%  # Fill missing mutation counts with 0
mutate(Chr = factor(Chr, levels = valid_chromosomes))  # Ensure correct order
# Define the path for the output .tex file
output_path <- "~/Downloads/mutations_per_chromosome.tex"
# Open TikZ device
tikz(output_path, standAlone = TRUE, width = 6, height = 4)  # Set size as needed
# Plot the number of mutations per chromosome
ggplot(complete_counts, aes(x = Chr, y = Mutations)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Number of Mutations Per Chromosome",
x = "Chromosome",
y = "Number of Mutations"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readabilit
# Test general compatibility
tikzTest()
# Test the specific character causing issues
tikzTest("\\char77")
# Define file paths
downloads_path <- file.path(Sys.getenv("USERPROFILE"), "Downloads")  # Adjust if on macOS or Linux
plot_pdf_path <- file.path(downloads_path, "mutations_per_chromosome.pdf")
latex_path <- file.path(downloads_path, "mutations_per_chromosome.tex")
# Save the plot as a PDF
ggsave(plot_pdf_path, plot = ggplot(complete_counts, aes(x = Chr, y = Mutations)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Number of Mutations Per Chromosome",
x = "Chromosome",
y = "Number of Mutations"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)),
width = 8, height = 6)  # Set dimensions as needed
# Write LaTeX code to include the PDF
sink(latex_path)
cat("\\documentclass{article}\n")
cat("\\usepackage{graphicx}\n")
cat("\\usepackage{float}\n") # To ensure the figure stays in place
cat("\\begin{document}\n")
cat("\\begin{figure}[H]\n")
cat("\\centering\n")
cat("\\includegraphics[width=\\textwidth]{mutations_per_chromosome.pdf}\n")
cat("\\caption{Number of Mutations Per Chromosome}\n")
cat("\\label{fig:mutations_per_chromosome}\n")
cat("\\end{figure}\n")
cat("\\end{document}\n")
sink()
cat("PDF plot and LaTeX file saved to your Downloads folder.\n")
library(readxl)
library(ggplot2)
library(dplyr)
# Load the Excel file (adjust the path to your file)
seq05_HG01605_annovar_version_1_$Chr <- gsub("chr", "", seq05_HG01605_annovar_version_1_$Chr, ignore.case = TRUE)
seq05_HG01605_annovar_version_1_$Chr <- trimws(seq05_HG01605_annovar_version_1_$Chr)  # Remove leading/trailing spaces
sum(is.na(seq05_HG01605_annovar_version_1_$Chr))
# Filter out rows with missing or empty values in the Chr column
seq05_HG01605_annovar_version_1_ <- seq05_HG01605_annovar_version_1_[!is.na(seq05_HG01605_annovar_version_1_$Chr), ]
data <-seq05_HG01605_annovar_version_1_
# Check unique mutation types in ExonicFunc.refGene column
unique_mutations <- unique(data$`ExonicFunc.refGene`)
print("Unique mutation types:")
print(unique_mutations)
# Count the occurrences of each mutation type
mutation_counts <- data %>%
group_by(`ExonicFunc.refGene`) %>%
summarise(Count = n())
# Print the mutation counts for verification
print("Counts of each mutation type:")
print(mutation_counts)
# Filter out rows with NA or "Blank" in the ExonicFunc.refGene column
filtered_data <- data[!is.na(data$ExonicFunc.refGene) & data$ExonicFunc.refGene != "Blank", ]
# Count the occurrences of each mutation type
mutation_counts <- data %>%
group_by(`ExonicFunc.refGene`) %>%
summarise(Count = n())
# Print the mutation counts for verification
print("Counts of each mutation type:")
print(mutation_counts)
# Remove any rows with NA or blank values
mutation_counts <- mutation_counts %>%
filter(!is.na(`ExonicFunc.refGene`) & `ExonicFunc.refGene` != "")
# Create a pie chart
ggplot(mutation_counts, aes(x = "", y = Count, fill = `ExonicFunc.refGene`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(
title = "Distribution of Mutation Types",
fill = "Mutation Type"
) +
theme_void() +
theme(legend.position = "right")
# Filter out rows with NA or "Blank" in the ExonicFunc.refGene column
filtered_data <- data[!is.na(data$ExonicFunc.refGene) & data$ExonicFunc.refGene != "Blank", ]
# Count the occurrences of each mutation type
mutation_counts <- data %>%
group_by(`ExonicFunc.refGene`) %>%
summarise(Count = n())
# Print the mutation counts for verification
print("Counts of each mutation type:")
print(mutation_counts)
# Remove any rows with NA or blank values
mutation_counts <- mutation_counts %>%
filter(!is.na(`ExonicFunc.refGene`) & `ExonicFunc.refGene` != "")
# Create a pie chart
ggplot(mutation_counts, aes(x = "", y = Count, fill = `ExonicFunc.refGene`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(
title = "Distribution of Mutation Types",
fill = "Mutation Type"
) +
theme_void() +
theme(legend.position = "right")
# Create a pie chart
ggplot(mutation_df, aes(x = "", y = Count, fill = MutationType)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(
title = "Distribution of Mutation Types",
fill = "Mutation Type"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Remove any rows with NA or blank values
mutation_counts <- table(filtered_data$ExonicFunc.refGene)
# Convert the table to a data frame for plotting
mutation_df <- as.data.frame(mutation_counts)
colnames(mutation_df) <- c("MutationType", "Count"
# Create a pie chart
ggplot(mutation_df, aes(x = "", y = Count, fill = MutationType)) +
ggplot(mutation_df, aes(x = "", y = Count, fill = MutationType)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(
title = "Distribution of Mutation Types",
fill = "Mutation Type"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
library(readxl)
library(ggplot2)
library(dplyr)
# Load the Excel file (adjust the path to your file)
seq05_HG01605_annovar_version_1_$Chr <- gsub("chr", "", seq05_HG01605_annovar_version_1_$Chr, ignore.case = TRUE)
seq05_HG01605_annovar_version_1_$Chr <- trimws(seq05_HG01605_annovar_version_1_$Chr)  # Remove leading/trailing spaces
sum(is.na(seq05_HG01605_annovar_version_1_$Chr))
# Filter out rows with missing or empty values in the Chr column
seq05_HG01605_annovar_version_1_ <- seq05_HG01605_annovar_version_1_[!is.na(seq05_HG01605_annovar_version_1_$Chr), ]
data <- seq05_HG01605_annovar_version_1_
# Check unique mutation types in ExonicFunc.refGene column
unique_mutations <- unique(data$`ExonicFunc.refGene`)
cat("Unique mutation types:\n")
print(unique_mutations)
# Filter out rows with NA or "Blank" in the ExonicFunc.refGene column
filtered_data <- data[!is.na(data$ExonicFunc.refGene) & data$ExonicFunc.refGene != "Blank", ]
# Count the occurrences of each mutation type
mutation_counts <- filtered_data %>%
group_by(`ExonicFunc.refGene`) %>%
summarise(Count = n()) %>%
arrange(desc(Count))  # Optional: Arrange by descending count for better visualization
# Print the mutation counts for verification
cat("Counts of each mutation type:\n")
print(mutation_counts)
# Plot the pie chart
ggplot(mutation_counts, aes(x = "", y = Count, fill = `ExonicFunc.refGene`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(
title = "Distribution of Mutation Types",
fill = "Mutation Type"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
library(readxl)
library(ggplot2)
library(dplyr)
# Load and clean the data
seq05_HG01605_annovar_version_1_$Chr <- gsub("chr", "", seq05_HG01605_annovar_version_1_$Chr, ignore.case = TRUE)
seq05_HG01605_annovar_version_1_$Chr <- trimws(seq05_HG01605_annovar_version_1_$Chr)  # Remove leading/trailing spaces
# Filter out rows with missing or empty values in the Chr column
seq05_HG01605_annovar_version_1_ <- seq05_HG01605_annovar_version_1_[!is.na(seq05_HG01605_annovar_version_1_$Chr), ]
data <- seq05_HG01605_annovar_version_1_
# Check unique mutation types in ExonicFunc.refGene column
unique_mutations <- unique(data$`ExonicFunc.refGene`)
cat("Unique mutation types:\n")
print(unique_mutations)
# Filter out rows with NA or "Blank" in the ExonicFunc.refGene column
filtered_data <- data[!is.na(data$ExonicFunc.refGene) & data$ExonicFunc.refGene != "Blank", ]
# Count the occurrences of each mutation type
mutation_counts <- filtered_data %>%
group_by(`ExonicFunc.refGene`) %>%
summarise(Count = n()) %>%
arrange(desc(Count))  # Optional: Arrange by descending count for better visualization
# Print the mutation counts for verification
cat("Counts of each mutation type:\n")
print(mutation_counts)
# Plot the pie chart
pie_chart <- ggplot(mutation_counts, aes(x = "", y = Count, fill = `ExonicFunc.refGene`)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(
title = "Distribution of Mutation Types",
fill = "Mutation Type"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Save the plot as a PDF without TikZ
output_file <- file.path(Sys.getenv("USERPROFILE"), "Downloads", "mutation_types_pie_chart.pdf")
ggsave(output_file, pie_chart, width = 8, height = 6, device = "pdf")
cat("Pie chart saved to:", output_file, "\n")
library(ggplot2)
library(dplyr)
# Define chromosome sizes (in base pairs) and convert to megabases (Mb)
chromosome_sizes <- data.frame(
Chromosome = c(as.character(1:22), "X", "Y"),
Size = c(
248956422, 242193529, 198295559, 190214555, 181538259, 170805979,
159345973, 145138636, 138394717, 133797422, 135086622, 133275309,
114364328, 107043718, 101991189, 90338345, 83257441, 80373285,
58617616, 64444167, 46709983, 50818468, 156040895, 57227415
) / 1e6  # Convert to Mb
)
# Define the number of mutations for each chromosome
mutation_counts <- data.frame(
Chromosome = c(as.character(1:22), "X", "Y"),
Mutations = c(
20000, 19500, 18000, 16000, 15500, 15000, 14000, 13000,
12500, 12000, 11800, 11600, 11000, 10500, 10200, 9500,
9200, 8800, 7000, 7500, 6000, 6200, 14000, 5000  # Replace with your data
)
)
# Merge the datasets
data <- inner_join(chromosome_sizes, mutation_counts, by = "Chromosome")
# Calculate the correlation
correlation <- cor(data$Size, data$Mutations)
# Perform linear regression
linear_model <- lm(Mutations ~ Size, data = data)
# Extract the R² value and coefficients
r_squared <- summary(linear_model)$r.squared
intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]
# Print regression details
cat("Linear Regression Details:\n")
cat(sprintf("Equation: Mutations = %.2f + %.2f * Size (Mb)\n", intercept, slope))
cat(sprintf("R² Value: %.4f\n", r_squared))
cat(sprintf("Correlation: %.4f\n", correlation))
# Create the scatter plot with a line of best fit
scatter_plot <- ggplot(data, aes(x = Size, y = Mutations)) +
geom_point(size = 3, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(
title = "Chromosome Size vs. Number of Mutations",
x = "Chromosome Size (Mb)",
y = "Number of Mutations",
caption = sprintf(
"Linear regression equation: Mutations = %.2f + %.2f * Size (Mb)\nR² Value: %.4f",
intercept, slope, r_squared
)
) +
theme_minimal()
# Print the plot
print(scatter_plot)
# Define chromosome sizes (in base pairs) and convert to megabases (Mb)
chromosome_sizes <- data.frame(
Chromosome = c(as.character(1:22), "X", "Y"),
Size = c(
248956422, 242193529, 198295559, 190214555, 181538259, 170805979,
159345973, 145138636, 138394717, 133797422, 135086622, 133275309,
114364328, 107043718, 101991189, 90338345, 83257441, 80373285,
58617616, 64444167, 46709983, 50818468, 156040895, 57227415
) / 1e6  # Convert to Mb
)
# Define the number of mutations for each chromosome
mutation_counts <- data.frame(
Chromosome = c(as.character(1:22), "X", "Y"),
Mutations = c(
20000, 19500, 18000, 16000, 15500, 15000, 14000, 13000,
12500, 12000, 11800, 11600, 11000, 10500, 10200, 9500,
9200, 8800, 7000, 7500, 6000, 6200, 14000, 5000  # Replace with your data
)
)
# Merge the datasets
data <- inner_join(chromosome_sizes, mutation_counts, by = "Chromosome")
# Calculate the correlation
correlation <- cor(data$Size, data$Mutations)
# Perform linear regression
linear_model <- lm(Mutations ~ Size, data = data)
# Extract the R² value and coefficients
r_squared <- summary(linear_model)$r.squared
intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]
# Print regression details
cat("Linear Regression Details:\n")
cat(sprintf("Equation: Mutations = %.2f + %.2f * Size (Mb)\n", intercept, slope))
cat(sprintf("R² Value: %.4f\n", r_squared))
cat(sprintf("Correlation: %.4f\n", correlation))
# Create the scatter plot with a line of best fit
scatter_plot <- ggplot(data, aes(x = Size, y = Mutations)) +
geom_point(size = 3, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(
title = "Chromosome Size vs. Number of Mutations",
x = "Chromosome Size (Mb)",
y = "Number of Mutations",
caption = sprintf(
"Linear regression equation: Mutations = %.2f + %.2f * Size (Mb)\nR² Value: %.4f",
intercept, slope, r_squared
)
) +
theme_minimal()
# Print the plot
print(scatter_plot)
# Save the plot to a PDF file without relying on tikzDevice
output_file <- file.path(Sys.getenv("USERPROFILE"), "Downloads", "chromosome_size_vs_mutations.pdf")
ggsave(output_file, scatter_plot, width = 8, height = 6)
cat("Scatter plot saved to:", output_file, "\n")
# Load libraries
library(readxl)
library(dplyr)
# Clean and prepare the data
seq05_HG01605_annovar_version_1_$Chr <- gsub("chr", "", seq05_HG01605_annovar_version_1_$Chr, ignore.case = TRUE)
seq05_HG01605_annovar_version_1_$Chr <- trimws(seq05_HG01605_annovar_version_1_$Chr)  # Remove leading/trailing spaces
# Filter out rows with missing or invalid chromosome data
valid_chromosomes <- c(as.character(1:22), "X", "Y")
filtered_data <- seq05_HG01605_annovar_version_1_ %>%
filter(Chr %in% valid_chromosomes)
# Count the number of mutations per chromosome
mutation_counts <- filtered_data %>%
group_by(Chr) %>%
summarise(Mutations = n())
# Fill in chromosomes with 0 mutations
complete_counts <- data.frame(Chr = valid_chromosomes) %>%
left_join(mutation_counts, by = "Chr") %>%
replace_na(list(Mutations = 0))
# Convert to numeric for analysis
complete_counts$Chr <- factor(complete_counts$Chr, levels = valid_chromosomes)
# Add chromosome sizes, genes, exons, and introns (replace with actual values)
chromosome_data <- data.frame(
Chr = valid_chromosomes,
Size = c(248956422, 242193529, 198295559, 190214555, 181538259, 170805979, 159345973, 145138636,
138394717, 133797422, 135086622, 133275309, 114364328, 107043718, 101991189, 90338345,
83257441, 80373285, 58617616, 64444167, 46709983, 50818468, 156040895, 57227415),
Genes = c(2514, 1354, 1394, 926, 1186, 1306, 2508, 908, 1033, 1017, 1567, 1299, 426, 854, 843, 1093,
1459, 367, 1609, 775, 309, 671, 1048, 98),
Exons = c(22345, 12506, 13517, 8299, 9946, 11406, 23045, 7823, 8941, 10273, 12459, 12399, 3784, 6837,
8106, 9986, 13179, 3333, 12169, 6492, 2539, 5173, 8568, 660),
Introns = c(19831, 11152, 12123, 7373, 8760, 10100, 20537, 6915, 7908, 9256, 10892, 11100, 3358,
6106, 7263, 8893, 11720, 2966, 10560, 5717, 2230, 4502, 7520, 562)
)
# Merge with mutation data
merged_data <- chromosome_data %>%
left_join(complete_counts, by = "Chr")
# Perform analysis and scatter plots (reuse the scatter plotting function provided earlier)
create_scatter_plot <- function(x_var, y_var, x_label, y_label, plot_title) {
linear_model <- lm(y_var ~ x_var, data = merged_data)
r_squared <- summary(linear_model)$r.squared
intercept <- coef(linear_model)[1]
slope <- coef(linear_model)[2]
cat(sprintf("Regression for %s vs. %s:\n", y_label, x_label))
cat(sprintf("Equation: %s = %.2f + %.2f * %s\n", y_label, intercept, slope, x_label))
cat(sprintf("R² Value: %.4f\n", r_squared))
ggplot(merged_data, aes(x = x_var, y = y_var)) +
geom_point(size = 3, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(
title = plot_title,
x = x_label,
y = y_label,
caption = sprintf(
"Linear regression: %s = %.2f + %.2f * %s\nR²: %.4f",
y_label, intercept, slope, x_label, r_squared
)
) +
theme_minimal()
}
# Generate plots
genes_plot <- create_scatter_plot(
x_var = merged_data$Genes,
y_var = merged_data$Mutations,
x_label = "Number of Genes",
y_label = "Number of Mutations",
plot_title = "Genes vs. Mutations"
)
exons_plot <- create_scatter_plot(
x_var = merged_data$Exons,
y_var = merged_data$Mutations,
x_label = "Number of Exons",
y_label = "Number of Mutations",
plot_title = "Exons vs. Mutations"
)
introns_plot <- create_scatter_plot(
x_var = merged_data$Introns,
y_var = merged_data$Mutations,
x_label = "Number of Introns",
y_label = "Number of Mutations",
plot_title = "Introns vs. Mutations"
)
# Save plots as PDFs
output_path <- file.path(Sys.getenv("USERPROFILE"), "Downloads")
ggsave(file.path(output_path, "genes_vs_mutations.pdf"), plot = genes_plot, width = 8, height = 6)
ggsave(file.path(output_path, "exons_vs_mutations.pdf"), plot = exons_plot, width = 8, height = 6)
ggsave(file.path(output_path, "introns_vs_mutations.pdf"), plot = introns_plot, width = 8, height = 6)
cat("Scatter plots saved to:", output_path, "\n")
pwd
9606.protein.links.v12.0 <- read.table("C:/Users/oscar/Downloads/9606.protein.links.v12.0.txt/9606.protein.links.v12.0.txt", quote="\"", comment.char="")
9606.protein.links.v12.0 <- read.csv2("C:/Users/oscar/Downloads/9606.protein.links.v12.0.txt/9606.protein.links.v12.0.txt", header=FALSE, sep="")
install.packages("biomaRt")
install.packages("dplyr")
install.packages("dplyr")
install.packages("readr")
install.packages("rstudioapi")  # For setting working directory to script location
# Load necessary libraries
library(biomaRt)
install.packages("rstudioapi")
library(readr)
install.packages("rstudioapi")
install.packages("rstudioapi")
# Set working directory to the script's location
script_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(script_dir)
# Read the data (space-separated values)
df <- read.delim("9606.protein.links.v12.0.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
# Read the data (space-separated values)
df <- read.delim("protein_links.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
pwd
getwd()
setwd("C:/Desktop/Programming/Hacklytics2025")
# Read the data (space-separated values)
df <- read.delim("protein_links.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
# Read the data (space-separated values)
df <- read.delim("protein_links.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
# Use biomaRt to get UniProt IDs
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
df[1:5, "protein2"] <- ifelse(df[1:5, "protein2"] %in% names(string_to_uniprot),
string_to_uniprot[df[1:5, "protein2"]],
df[1:5, "protein2"])
# Create a mapping table
string_to_uniprot <- setNames(conversion_table$uniprotswissprot, conversion_table$ensembl_peptide_id)
conversion_table <- getBM(
attributes = c("ensembl_peptide_id", "uniprotswissprot"),
filters = "ensembl_peptide_id",
values = string_ids,
mart = ensembl
)
install.packages("readr")
# Read the data (space-separated values)
df <- read.delim("protein_links.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
# Use biomaRt to get UniProt IDs
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Create a mapping table
string_to_uniprot <- setNames(conversion_table$uniprotswissprot, conversion_table$ensembl_peptide_id)
# Load necessary libraries
library(biomaRt)
library(dplyr)
library(readr)
# Read the data (space-separated values)
df <- read.delim("protein_links.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
# Use biomaRt to get UniProt IDs
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(readr)
# Read the data (space-separated values)
df <- read.delim("protein_links.txt", sep = "", header = TRUE, stringsAsFactors = FALSE)
# Use biomaRt to get UniProt IDs
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
